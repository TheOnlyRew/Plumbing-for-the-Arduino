Servo Chapter 3 - While We Smooth Things Out...
	We have a sequentially executing series of commands that sets the servo to three positions, one after another. How cool is that? Not cool enough? I agree with you on that. Lets take a look at how we can write less code to get a finer grained control over the position of a decending servo.

GOALS
	1 Take a look at an amazing thing known as /a variable/.
	2 Find out what loops can do for you.
	3 Get that servo stepping down smoother, for less.

THE CIRCUT
	Same as last chapter, we're still just going to be working with the servo. Here's the diagram for reference.
		[[CIRCUT DIAGRAM]]

THE CODE
	So, fist thing's first. The goal here is to do what every good computer programer strives to do every day; as little work as possible.
	We have in front of us an Arduino. An piece of embedded hardware. A tiny computer. It's whole shtik is computing things. Doing math. I say, lets take advantage of the fact that these little guys like doing math, and stop doing it ourselves.

	The first step we need to take is to tell our program what it ought to be doing math on. For this, we're going to have to declare a variable.
		[[DIAGRAM.. or code?]]
		BYTE position:

	As you can see, declaring a variable is nearly the same as declaring a channel. The only difference between channel declarations and variable declarations is that you don't declare variables with the CHAN keyword, which... is appropriate. Seeing as variables aren't CHANnels. Variable declarations go in the same place as channel declarations, and so long as the variable declarations come before any processes (remember, PARs and SEQs can be seen as processes), order doesn't matter.
	There is a rather simple but drastic conceptual difference between variables and channels, though. Channels have been used to communicate information. We're about to use variables to store information. Most recently we've used a singe BYTE channel to communicate a range BYTEs. We are now about to use a single BYTE variable to store a range of BYTEs. Variable are named variables because their value is variable. You can store any number between 0 and 255 in a variable of type BYTE, and change that variable at any time during a program's opperation, allowing you to access a different number by calling on the same name.

	Let's look at some code that takes advantage of a a variable to set the position of a servo. This code is going to function exactly like the code we left off with in the last chapter, save that there are going to be a few extra lines that will become less superfluous in the second half of this chaper.
	First we're going to add that position BYTE into our declarations portion of the code.
		[[CODE]]
		PROC main ()
		  CHAN BYTE pos.chan:
		  *BYTE position:*
		  PAR
		    simple.servo (11, position?)
		    SEQ
		      delay (500)
		      pos.chan ! 180
		      . . .
		:

	Now that we have a BYTE variable, we need to use it. I told you variables are used to store information. I haven't told you how that information gets stored. I figured it will be easier to show you.
		[[CODE]]
		PROC main ()
		  CHAN BYTE pos.chan:
		  *BYTE position:*
		  PAR
		    simple.servo (11, position?)
		    SEQ
		      *position := 180*
		      delay (500)
		      pos.chan ! 180
		      . . .
		:

	There you go. You've now declaired and set a variable in Occam-pi. Note that the /assignment/ operation (variable.name *:=* value) occurs within the SEQ statement, and has no trailing ':' that follows any standard declaration.
	Now that position's been set in the sequence, it can be used in place of any other BYTE, or a new value can be re-assigned to it. Let's just go ahead and do both of these thigns in the next change to our code.
		[[CODE]]
		PROC main ()
		  CHAN BYTE pos.chan:
		  BYTE position:
		  PAR
		    simple.servo (11, position?)
		    SEQ
		      position := 180
		      delay (500)
		      *pos.chan ! position*
		      *position := (position - 90)*
		      . . .
		:

	And that's how we work with variable. I'm sure it caught your eye that in that second assignment of position, we actually used position to find a new value for position. That right there is one of the powerful tools we can take advantage of using variables.
	In that statement we're not actually saying 'position := position - 90' because of the Order of Operations. Now how's that for a blast back to High School Alegbra? It's a very important blast from the past for most of us though, because the order that the operations in that stament (plural because there are two operations there) occur makes a crucial difference to the new value of position. In that line of code, the first operation  that resolves (because it's in parenthesis) is 'position - 90'. With position equal to 180, the math works out to 180 - 90 = 90. Only then do we set position's new value to 90, and we're back to the races.

	Let's go ahead and make sure that we send nothing but position down pos.chan (see how the naming scheme worked out?) so that we can see that the code we wound up with last chapter can function just fine if we use nothing but variables. And let's keep assigning position relative to its own value, because that's always fun.
		[[CODE]]
		PROC main ()
		  CHAN BYTE pos.chan:
		  BYTE position:
		  PAR
		    simple.servo (11, position?)
		    SEQ
		      position := 180
		      delay (500)
		      pos.chan ! position
		      position := (position - 90)
		      dealy (500)
		      pos.chan ! position
		      position := (position - 90)
		      dealy (500)
		      pos.chan ! position
		:

	There we go. Back to working order, only this time we're using a BYTE variable to know and find what value to pass down our BYTE channel.
	Only... That's not so good, really. We've not yet improved the functionallity of our code by implimenting all this with variable; in fact, all we've managed to do is make our code more complex. Though those last few steps seem to hardly be productive at this moment, when combound with this next piece of the Occam-pi language, it will become clear why we should make liberal use of variables, and how doing so can save us time.

		[[DIAGRAM]]
		WHILE TRUE
		  looped.process (...)

	This is what's called an *infinite WHILE loop*. I'm guessing you've an intuative idea of what this loop does just by hearing what it's called, and so I'll just say that this loop will repeat the given process indefinitely. It essentially creates a loop in the code where the bottom of the WHILE statement flows, instead of code bellow the WHILE, back to the top of the loop.
	As you can see, the syntax for WHILE statements (of which this WHILE TRUE statement is something of a speical case) is very similar to PAR and SEQ statements. On the line immediately below the WHILE, you need to indent the process to be looped two additional spaces. What really differentiates the syntax of loops from SEQs and PARs is that there can only be one process below the loop. It can (and most often is) a SEQ or PAR that combines a number of additional processes or operations to be looped, so there's really not a restriction there. We just need to be sure to specify if we want our looped processes to be performed in PARallel or in SEQuence.

	So to integrate such a loop into our code, we need to look at what we need it to do -- what are we repeatedly doing that can be looped. Looking back at the code we have thus far, it's pretty clear we recalculate position, wait for a period, and then send the new position down pos.chan. This sequence of commands is repeated three times and makes for a lot of boring repition in the code, as well as a very jerky motion of the servo. So lets take the basics and smooth things out with a WHILE TRUE loop.
	First we need to actually add that piece of syntax to the code, and since we're going to be performing a series of commands one after another, we're going to specify that the process to be looped is a SEQ.
		[[CODE]]
		PROC main ()
		  CHAN BYTE pos.chan:
		  BYTE position:
		  PAR
		    simple.servo (11, position?)
		    WHILE TRUE
		      SEQ
		:

	Note that the SEQ there is indented two spaces pas the WHILE, and the next few command we place are going to be indented a couple more past the SEQ.
	The first command we need to replace is recalculating positon. Because we're going to be looping for as long as we want, let's only decrement position by 1, instead of 90.
		[[CODE]]
		PROC main ()
		  . . .
		    WHILE TRUE
		      SEQ
		        positon := position - 1

	Now then, we need to wait for a bit to make sure we see the servo move, so let's add a delay that's only set to 20 milliseconds because waiting half a second to watch a servo move a single degree doesn't sound that interesting to me.
		[[CODE]]
		PROC main ()
		  . . .
		    WHILE TRUE
		      SEQ
		        positon := position - 1
		        delay (20)

	And finally we add that communication down pos.chan.
		[[CODE]]
		PROC main ()
		  CHAN BYTE pos.chan:
		  BYTE position:
		  PAR
		    simple.servo (11, position?)
		    WHILE TRUE
		      SEQ
		        positon := position - 1
		        delay (20)
		        pos.chan ! position
		:

	So that code is looking pretty good. There's a pretty big problem I've made for us, though, by removing the statment that actually defined the first value of position. We could solve this with another SEQ that would fist set position, then run the WHILE loop, or we can modify the declaration of position. Whenever we declare a variable, we can define an initial value for it using the keyworks INITIAL and IS.
		[[CODE]]
		PROC main ()
		  CHAN BYTE pos.chan:
		  INITIAL BYTE position IS 180:

	You can almost read that line of code out loud and make it sound like a coherent statement. Be sure that when you initialize a variable, the order of keywords is always as it appears above, though.
		[[DIAGRAM]]
		INITIAL <datatype> <name> IS <value>:

	It took a while to get here, but when we put all of this code together we finally have a much smoother sweep of our servo, in far fewer lines than when we started. Loops and variables. Good stuff.
		[[CODE]]
		PROC main ()
		  CHAN BYTE pos.chan:
		  INITIAL BYTE position IS 180:
		  PAR
		    simple.servo (11, position?)
		    WHILE TRUE
		      SEQ
		        positon := position - 1
		        delay (20)
		        pos.chan ! position
		: